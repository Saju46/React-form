{"ast":null,"code":"import { Role } from './';\nexport function configureFakeBackend() {\n  // array in local storage for user records\n  let users = JSON.parse(localStorage.getItem('users')) || [{\n    id: 1,\n    title: 'Mr',\n    firstName: 'Joseph',\n    lastName: 'John',\n    email: 'joe@bloggs.com',\n    role: Role.User,\n    password: 'joe123'\n  }];\n\n  // monkey patch fetch to setup fake backend\n  let realFetch = window.fetch;\n  window.fetch = function (url, opts) {\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(handleRoute, 500);\n      function handleRoute() {\n        const {\n          method\n        } = opts;\n        switch (true) {\n          case url.endsWith('/users') && method === 'GET':\n            return getUsers();\n          case url.match(/\\/users\\/\\d+$/) && method === 'GET':\n            return getUserById();\n          case url.endsWith('/users') && method === 'POST':\n            return createUser();\n          case url.match(/\\/users\\/\\d+$/) && method === 'PUT':\n            return updateUser();\n          case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n            return deleteUser();\n          default:\n            // pass through any requests not handled above\n            return realFetch(url, opts).then(response => resolve(response)).catch(error => reject(error));\n        }\n      }\n\n      // route functions\n\n      function getUsers() {\n        return ok(users);\n      }\n      function getUserById() {\n        let user = users.find(x => x.id === idFromUrl());\n        return ok(user);\n      }\n      function createUser() {\n        const user = body();\n        if (users.find(x => x.email === user.email)) {\n          return error(`User with the email ${user.email} already exists`);\n        }\n\n        // assign user id and a few other properties then save\n        user.id = newUserId();\n        user.dateCreated = new Date().toISOString();\n        delete user.confirmPassword;\n        users.push(user);\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      }\n      function updateUser() {\n        let params = body();\n        let user = users.find(x => x.id === idFromUrl());\n\n        // only update password if included\n        if (!params.password) {\n          delete params.password;\n        }\n        // don't save confirm password\n        delete params.confirmPassword;\n\n        // update and save user\n        Object.assign(user, params);\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      }\n      function deleteUser() {\n        users = users.filter(x => x.id !== idFromUrl());\n        localStorage.setItem('users', JSON.stringify(users));\n        return ok();\n      }\n\n      // helper functions\n\n      function ok(body) {\n        resolve({\n          ok: true,\n          text: () => Promise.resolve(JSON.stringify(body))\n        });\n      }\n      function error(message) {\n        resolve({\n          status: 400,\n          text: () => Promise.resolve(JSON.stringify({\n            message\n          }))\n        });\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function body() {\n        return opts.body && JSON.parse(opts.body);\n      }\n      function newUserId() {\n        return users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n      }\n    });\n  };\n}","map":{"version":3,"names":["Role","configureFakeBackend","users","JSON","parse","localStorage","getItem","id","title","firstName","lastName","email","role","User","password","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","handleRoute","method","endsWith","getUsers","match","getUserById","createUser","updateUser","deleteUser","then","response","catch","error","ok","user","find","x","idFromUrl","body","newUserId","dateCreated","Date","toISOString","confirmPassword","push","setItem","stringify","params","Object","assign","filter","text","message","status","urlParts","split","parseInt","length","Math","max","map"],"sources":["/Users/saju/Downloads/react-formik-master-details-crud-example 2/src/_helpers/fake-backend.js"],"sourcesContent":["import { Role } from './'\n\nexport function configureFakeBackend() {\n    // array in local storage for user records\n    let users = JSON.parse(localStorage.getItem('users')) || [{ \n        id: 1,\n        title: 'Mr',\n        firstName: 'Joseph',\n        lastName: 'John',\n        email: 'joe@bloggs.com',\n        role: Role.User,\n        password: 'joe123'\n    }];\n\n    // monkey patch fetch to setup fake backend\n    let realFetch = window.fetch;\n    window.fetch = function (url, opts) {\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(handleRoute, 500);\n\n            function handleRoute() {\n                const { method } = opts;\n                switch (true) {\n                    case url.endsWith('/users') && method === 'GET':\n                        return getUsers();\n                    case url.match(/\\/users\\/\\d+$/) && method === 'GET':\n                        return getUserById();\n                    case url.endsWith('/users') && method === 'POST':\n                        return createUser();\n                    case url.match(/\\/users\\/\\d+$/) && method === 'PUT':\n                        return updateUser();\n                    case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n                        return deleteUser();\n                    default:\n                        // pass through any requests not handled above\n                        return realFetch(url, opts)\n                            .then(response => resolve(response))\n                            .catch(error => reject(error));\n                }\n            }\n\n            // route functions\n\n            function getUsers() {\n                return ok(users);\n            }\n\n            function getUserById() {\n                let user = users.find(x => x.id === idFromUrl());\n                return ok(user);\n            }\n    \n            function createUser() {\n                const user = body();\n\n                if (users.find(x => x.email === user.email)) {\n                    return error(`User with the email ${user.email} already exists`);\n                }\n\n                // assign user id and a few other properties then save\n                user.id = newUserId();\n                user.dateCreated = new Date().toISOString();\n                delete user.confirmPassword;\n                users.push(user);\n                localStorage.setItem('users', JSON.stringify(users));\n\n                return ok();\n            }\n    \n            function updateUser() {\n                let params = body();\n                let user = users.find(x => x.id === idFromUrl());\n\n                // only update password if included\n                if (!params.password) {\n                    delete params.password;\n                }\n                // don't save confirm password\n                delete params.confirmPassword;\n\n                // update and save user\n                Object.assign(user, params);\n                localStorage.setItem('users', JSON.stringify(users));\n\n                return ok();\n            }\n    \n            function deleteUser() {\n                users = users.filter(x => x.id !== idFromUrl());\n                localStorage.setItem('users', JSON.stringify(users));\n\n                return ok();\n            }\n    \n            // helper functions\n\n            function ok(body) {\n                resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) });\n            }\n\n            function error(message) {\n                resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) });\n            }\n\n            function idFromUrl() {\n                const urlParts = url.split('/');\n                return parseInt(urlParts[urlParts.length - 1]);\n            }\n\n            function body() {\n                return opts.body && JSON.parse(opts.body);    \n            }\n\n            function newUserId() {\n                return users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n            }\n        });\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}